#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <semaphore.h>
#include <chrono>

using namespace std;

sem_t tollBoothSemaphore;
mutex printMutex;

void log(const string& message) {
    lock_guard<mutex> lock(printMutex);
    cout << message << endl;
}

void car(int id) {
    log("Car " + to_string(id) + " arrives at the toll booth.");

    sem_wait(&tollBoothSemaphore);  // Wait for a spot

    log("Car " + to_string(id) + " is passing through the toll booth.");
    this_thread::sleep_for(chrono::seconds(3));  // Simulate delay
    log("Car " + to_string(id) + " leaves the toll booth.");

    sem_post(&tollBoothSemaphore);  // Release the spot
}

int main() {
    sem_init(&tollBoothSemaphore, 0, 3);  // Max 3 cars at once
    vector<thread> cars;

    for (int i = 1; i <= 6; ++i) {
        cars.emplace_back(car, i);
        this_thread::sleep_for(chrono::milliseconds(500));
    }

    for (auto& t : cars) t.join();

    sem_destroy(&tollBoothSemaphore);
    return 0;
}
